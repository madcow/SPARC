GAS    Game Archive System running on the
SPARC  Software Preservation Architecture

Written by Leon Krieg <info@madcow.dev>.

License undetermined right now. Not to be confused with the
GNU assembler (If this overwrites your assembler config don't
send me an angry email). Sources will be published as soon as
the first milestones are completed.

# About the Project

SPARC is an unified emulation architecture. It handles platform
abstraction, memory management and provides a clean framework for
common chips (e.g. CPUs, VPDs, PSGs). It is the backend for GAS
and makes it easier to develop new emulators that will run on
different operating systems.

GAS runs on top of SPARC and implements the cores for each gaming
console. The goal is to emulate as accurately as possible while
keeping the software simple to use. Things should just work (TM)
out of the box. That is, as long as the user can provide their
ROM backups for both BIOS and games.

An important consideration is portability. Both in the binary
sense and in regards to how easy it is for the user to migrate
their files between multiple systems. Savegames and config can
be stored on a user provided FTP server to keep multiple device
states synchronized. Savegames are packaged as a single file for
all emulated systems but can be exported back to a format that
can be copied to original storage devices like memory cards.

There will be no savestates or other capabilities that were not
present on the original hardware. I'm trying to stay as true to
the real thing as I can.

SPARC runs on Windows and Linux either natively or with SDL2.
Maybe Android and Xbox can be supported later. Porting should
be fairly straightforward.

# Build on Linux

To build and install this project run the following commands.
gcc and make are required (and sudo might be needed to install
depending on user permissions).

  configure
  make && make install

TODO: Win32 build documentation.

# File Structure

## Global Files

The settings in /etc/gas.conf are overwritten by local user
settings. They provide default configuration values in case the
user has not defined those values in their local files.

  /etc/gas.cfg
  /usr/gas/rom/

## User Files

Local user files are stored in ~/.local/.share/gas/. Saves are
packaged together for easier portability but can be exported back
into the exact same format as on real hardware (to write on a
memory card for example).

  saves.bee
  config.cfg

TODO: Improve Linux documentation.
TODO: Win32 file system documentation.

# Milestones

## Linux X11, ALSA abstraction layer
## Win32 ASIO, WASAPI, XInput abstraction layer
## SDL2  cross-platform (maybe Xbox UWP later?)
## Game Gear + Master System emulation: Z80, VDP, PSG
## Game Boy (including Color and Advance)
## NES / SNES

TODO: Document necessary steps for each milestone.

# Name Ideas

Other name ideas ranging from neat to kafkaesque territory:

- BEE      Better Emulation Engine. Sweet file extension: 3 letters and
           can be written in hexadecimal as 0xBEE for file signatures.
           It is followed by the type nibble 0-F. The last valid package
           (or first invalid) type would be 0xBEEF. It's pretty magical.

- GEAR     Game Emulation Architecture
- PIMPLE   Platform Independent Media Preservation
           and Legacy Emulator

- MENIMEM  My Extremly Naive Implementation of
           Emulators (Eminem might sue)

TODO: Stop thinking of stupid names.
TODO: Documentation.
