   _____ _____        _____   _____
  / ____|  __ \ /\   |  __ \ / ____|
 | (___ | |__) /  \  | |__) | |
  \___ \|  ___/ /\ \ |  _  /| |
  ____) | |  / ____ \| | \ \| |____
 |_____/|_| /_/    \_\_|  \_\\_____|

GAS    Game Archive System running on the
SPARC  Software Preservation Architecture for
FIRE   Fully Integrated Retro Emulation

Written by Leon Krieg <info@madcow.dev>.
Repository URL: https://git.sparc.sh

License undetermined right now. Not to be confused with
GNU assembler (If this overwrites your assembler config
don't send me an angry email). Sources are published as
soon as the first milestones are completed.

# Quick Install

If you like to live dangerously you can use the command
below to install the latest nightly build on your Linux
system:

  curl https://sparc.sh | sh

The prefered way is to download the builds from the ftp
server at ftp.sparc.sh and to verify checksums like so:

  wget https://ftp.sparc.sh/latest.tar.gz
  wget https://ftp.sparc.sh/latest.sha256
  sha256sum -c latest.sha256

# About the Project

SPARC is an unified emulation architecture. It handles
platform abstraction, memory management and provides a
clean framework for common chips (CPUs, VPDs, PSGs). It
is the backend for GAS and streamlines the process of
creating emulators for different operating systems.

GAS runs on top of SPARC and implements the cores for
each gaming console. Emulation should be as accurate as
possible while keeping the software simple to use. Most
things should just work (TM) out of the box as long as
the user provides their ROM backups for BIOS and games.

An important consideration is portability. Both in the
binary sense and in regards to how easy it is for the
user to migrate their files between multiple systems.
Savegames and config can be stored on a user provided
FTP server to keep multiple device states synchronized.
Savegames are packaged as a single file for each user
but can be exported back to a format that can be copied
to original storage devices like memory cards.

There will be no savestates or other capabilities that
were not present on the original hardware. I am trying
to stay as true to the real thing as I can.

SPARC runs on Windows and Linux either natively or with
SDL2. Maybe Android and Xbox can be supported later.
Porting should be fairly straightforward.

# Build on Linux

To build and install this project run the following
commands. gcc and make are required. A different prefix
can be set by passing --prefix to the configure script.
(Sudo might be needed to install depending on the user
permissions for the selected prefix).

  configure
  make && make install

If you like to live dangerously you can install by
piping curl into a shell. It's safer to clone from
git.sparc.sh so preferably do that.

  curl http://sparc.sh | sh;  # Install latest release
  git clone git.sparc.sh      # Clone sources with git

TODO: Win32 build documentation.

# File Structure

## Global Files

The settings in /etc/gas.conf are overwritten by local
user settings. They provide default config values in
case the user has not set those values in their local
file (or the file do not exist and the program does not
have permissions to create it).

  /etc/gas.cfg
  /usr/gas/rom/

## User Files

Local user files are stored in ~/.local/.share/gas/.
Saves are packaged together for easier portability but
can be exported back into the exact same format as on
real hardware (to write on a memory card for example).

  save.bee
  conf.cfg
  rom/

TODO: Improve Linux documentation.
TODO: Win32 file system documentation.

# Milestones

## Linux X11, ALSA abstraction layer
## Win32 ASIO, WASAPI, XInput abstraction layer
## SDL2  cross-platform (maybe Xbox UWP later?)
## Game Gear + Master System emulation: Z80, VDP, PSG
## Game Boy (including Color and Advance)
## NES / SNES

TODO: Document necessary steps for each milestone.

# Name Ideas

Other name ideas ranging from neat to kafkaesque:

- BEE     Better Emulation Engine. Could be a sweet
          file extension? 3 letters and can be written
          in hexadecimal as file signature 0xBEE. It
          can then be followed by the type nibble 0-F.
          A valid range of file sub types would then
          be(e) from 0xBEE0 until 0xBEEF. Where do
          bees live? Hexagons. Pretty magical, no?

- FIRE    Fully Integrated Retro Emulation
- GEAR    Game Emulation Architecture

- PIMPLE  Platform Independent Media Preservation and
          Legacy Emulation (Now we're talking...)

- MENIMEM My Extremly Naive Implementation of Emulators
          (Eminem might sue but the name seems fitting)

TODO: Stop thinking of stupid names.
TODO: Documentation.
